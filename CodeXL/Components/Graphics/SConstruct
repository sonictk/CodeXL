# The main SCONS build file.
# The default is a 64 bit debug build. The command line can be used to override this. For example:
#
# scons GPS_build=release GPS_arch=x86
# add tests=1 to build the Linux-specific unit tests
# add internal=1 to build the internal build
# add CodeXL=1 to build for CodeXL
#
# Will build a 32 bit release build. Basic help is provided by using:
#
# scons -h
import os
from GPS_init import *

GPS_vars = Variables(None, ARGUMENTS)
GPS_vars.Add('GPS_build', 'Set to release to build for release', 0)
GPS_vars.Add('GPS_arch', 'Set to x86 for 32 bit build', 0)

# Build the environment (base compiler options)
GPS_env = Environment(variables = GPS_vars)
Help(GPS_vars.GenerateHelpText(GPS_env))

# Set the version of PerfAPI that is being used
GPS_env.PerfAPIVersion = "2_20"
GPS_env.BoostVersion = "1_59_0"

# set the default build parameters
GPS_env.archConfig = "x64"
GPS_env.buildConfig = "Debug"
GPS_env.libConfig = ""
GPS_env.gnuConfig = ""
GPS_env.extConfig = ""
GPS_env.libGPA = ""
GPS_env.libGPA_GLES = ""
GPS_env.platformSuffix = ""
GPS_env.debugSuffix = "-d"
GPS_env.buildSuffix = ""
GPS_env.projectSuffix = ""
GPS_env.projectName = "GPUPerfServer"
GPS_env.capturePlayerName = "CapturePlayer"
GPS_env.vulkanPluginName = "VulkanServer"
GPS_env.jpglib = "jpeg-9"
GPS_env.libpng = "v1.6.19/src"

buildTests = False
buildInternal = False
buildCodeXL = False

# look in the command line argument list for overrides
for key, value in ARGLIST:
    if key == 'GPS_build' and value == 'release':
        GPS_env.buildConfig = "Release"
        GPS_env.debugSuffix = ""
    elif key == 'GPS_arch' and value == 'x86':
        GPS_env.archConfig = 'x86'
        GPS_env.platformSuffix = "32"
    elif key == 'GPS_dist' and value == 'internal':
        buildInternal = True
        GPS_env.buildSuffix = "-Internal"
    elif key == 'CodeXL' and value == '1':
        GPS_env.projectName = "CXLGraphicsServer"
        GPS_env.capturePlayerName = "CXLGraphicsServerPlayer"
        GPS_env.vulkanPluginName = "CXLGraphicsServerVulkan"
        buildCodeXL = True
    elif key == 'tests' and value == '1':
        buildTests = True

# fix up debug/release folder names; CodeXL uses lower case
if buildCodeXL == True:
    GPS_env.buildConfig = GPS_env.buildConfig.lower()

ParseCommandLine(GPS_env, buildInternal);

rootPath = "obj"
# configPath is the configuration folder (debug, release etc)
# platformPath is the platform in the configPath folder (x64, x86)
GPS_env.configPath = GPS_env.buildConfig + GPS_env.buildSuffix
GPS_env.platformPath = GPS_env.configPath + "/" + GPS_env.archConfig
fullPath = rootPath + "/" + GPS_env.platformPath

GPS_env.projectSuffix = GPS_env.platformSuffix + GPS_env.debugSuffix + GPS_env.buildSuffix

# Decide where the target folder is going to be. Fix up 32/64 bit path for CodeXL
GPS_env.targetRoot = "bin/" + GPS_env.configPath
if buildCodeXL == True:
    if GPS_env.archConfig == 'x64':
        GPS_env.targetRoot = "Output_x86_64/" + GPS_env.configPath + "/bin"
    else:
        GPS_env.targetRoot = "Output_x86/" + GPS_env.configPath + "/bin"

# Compiler header include search directories
# Include paths for BaseTools, OSWrappers and other libraries
GPS_env['BASE_PATH'] = \
[
    '../Common',
    '../Common/Lib/Ext/tinyxml/2.6.2',
    '../Common/Lib/Ext/zlib/1.2.8',
    '../Common/Src',
    '../Common/Src/AMDTBaseTools/src',
    '../Common/Src/AMDTOSWrappers/src',
    '../Common/Src/AMDTOSWrappers/Include',
]

# Include paths for GLServer and WebServer
GPS_env['GPS_PATH'] = \
[
    '../../Server/Common',
    '../../Server/Common/Linux',
    '../../../Common/Src',
    '../../../Common/Src/ADLUtil',
    '../../../Common/Src/AMDLoggingRegistration',
    '../../../Common/Src/AMDTMutex',
    '../../../Common/Src/DDS',
    '../../../Common/Src/Sushi3/Common/include',
    '../../../Common/Lib/AMD/ADL/include',
    '../../../Common/Lib/AMD/ShaderDebugger/1.5/Include',
    '../../../Common/Lib/AMD/GPUPerfAPI/' + GPS_env.PerfAPIVersion + '/Include',
    '../../../Common/Lib/AMD/GPUThreadTrace/1_0/Include',
    '../../../Common/Lib/Ext/Boost/boost_' + GPS_env.BoostVersion,
    '../../../Common/Lib/Ext/libpng/' + GPS_env.libpng,
    '../../../Common/Lib/Ext/jpglib/' + GPS_env.jpglib,
    '../../../Common/Src/ShaderUtils',
    '../../../Common/Src',
    '../../../Common/Src/AMDTOSWrappers/Include',
]

# Additional linker library paths
GPS_env['GPS_LIBPATH'] = \
[
    '/usr/' + GPS_env.libConfig,
    '/usr/lib',
    '/usr/lib/' + GPS_env.gnuConfig,
    '../../obj/' + GPS_env.platformPath + '/GPUPerfStudioLegacy/Server/Common',
    '../../obj/' + GPS_env.platformPath + '/GPUPerfStudioLegacy',
    '../../../Common/Lib/Ext/Boost/boost_' + GPS_env.BoostVersion + '/lib/RHEL6/' + GPS_env.extConfig,
]

# Compiler flags
GPS_env.Prepend(CCFLAGS =
[
    '-Wno-unknown-pragmas',         # ignore unknown pragmas
    '-std=c++11',

    '-fmessage-length=0',
    '-pthread',

    '-fvisibility=hidden',
    '-fPIC',
    '-D_LINUX',
    '-DSU_USE_NATIVE_STL',
    '-DGPS_PLUGIN_STATIC',
    '-DGL_FRAME_CAPTURE',
    '-DUSE_POINTER_SINGLETON',
    '-DGL_GLEXT_PROTOTYPES',

# These flags will need to be build-dependent from visual studio
    "-D'GDT_PLATFORM_SUFFIX=\"" + GPS_env.platformSuffix + "\"'",
    "-D'GDT_DEBUG_SUFFIX=\"" + GPS_env.debugSuffix + "\"'",
    "-D'GDT_BUILD_SUFFIX=\"" + GPS_env.buildSuffix + "\"'",
    "-D'GDT_PROJECT_SUFFIX=\"" + GPS_env.projectSuffix + "\"'",
])

if buildInternal == True:
    GPS_env.Prepend(CCFLAGS = "-DGDT_INTERNAL")
else:
    GPS_env.Prepend(CCFLAGS = "-DGDT_PUBLIC")

if buildCodeXL == True:
    GPS_env.Prepend(CCFLAGS = "-DCODEXL_GRAPHICS")

GPS_env.Prepend(LINKFLAGS =
[
    '-fPIC',
    '-Wl,-z,defs',
])

initGtk(GPS_env);

# Export the environment
Export('GPS_env');

# Build script for BaseTools / OSWrappers
OSWrappers_Obj = SConscript(['SConscript'], src_dir='../', variant_dir=fullPath, duplicate=0)

# build script for Server/Common
APICommon_Obj = SConscript(['Server/Common/SConscript'], variant_dir=fullPath + '/GPUPerfStudioLegacy/Server/Common', duplicate=0)
Depends(APICommon_Obj, OSWrappers_Obj)

if buildCodeXL == False:
    # build script for Server/GLServer
    GLServer = SConscript(['Server/GLServer/SConscript'], variant_dir=fullPath + '/GPUPerfStudioLegacy/Server/GLServer', duplicate=0)
    Depends(GLServer, APICommon_Obj + OSWrappers_Obj )
    targetName = "/Plugins/GLServer" + GPS_env.projectSuffix + ".so"
    Command(GPS_env.targetRoot + targetName, fullPath + "/GPUPerfStudioLegacy/Server/GLServer/libGLServer.so", Copy("$TARGET", "$SOURCE"))

    # build script for Server/GLESServer
    GPS_env.rootFolder = os.getcwd()
    GLESServer = SConscript(['Server/GLESServer/SConscript'], variant_dir=fullPath + '/GPUPerfStudioLegacy/Server/GLESServer', duplicate=0)
    Depends(GLESServer, APICommon_Obj + OSWrappers_Obj)
    targetName = "/Plugins/GLESServer" + GPS_env.projectSuffix + ".so"
    Command(GPS_env.targetRoot + targetName, fullPath + "/GPUPerfStudioLegacy/Server/GLESServer/libGLESServer.so", Copy("$TARGET", "$SOURCE"))

# build script for Server/VulkanServer
GPS_env.rootFolder = os.getcwd()
VulkanServer = SConscript(['Server/VulkanServer/SConscript'], variant_dir=fullPath + '/GPUPerfStudioLegacy/Server/VulkanServer', duplicate=0)
Depends(VulkanServer, APICommon_Obj + OSWrappers_Obj)
targetName = GPS_env.targetRoot + "/Plugins/" + GPS_env.vulkanPluginName + GPS_env.projectSuffix + ".so"
Command(targetName, fullPath + "/GPUPerfStudioLegacy/Server/VulkanServer/libVulkanServer.so", Copy("$TARGET", "$SOURCE"))

# build script for Vulkan capture player
CapturePlayer = SConscript(['Server/CapturePlayer/SConscript'], variant_dir=fullPath + '/GPUPerfStudioLegacy/Server/CapturePlayer', duplicate=0)
Depends(CapturePlayer, APICommon_Obj + OSWrappers_Obj)
targetName = GPS_env.targetRoot + "/" + GPS_env.capturePlayerName + GPS_env.projectSuffix
Command(targetName, fullPath + "/GPUPerfStudioLegacy/Server/CapturePlayer/CapturePlayer", Copy("$TARGET", "$SOURCE"))

# Build the main executable
GPUPerfServer = SConscript(['Server/WebServer/SConscript'], variant_dir=fullPath+'/GPUPerfStudioLegacy/Server/WebServer', duplicate=0)
Depends(GPUPerfServer, APICommon_Obj + OSWrappers_Obj)
targetName = GPS_env.targetRoot + "/" + GPS_env.projectName + GPS_env.projectSuffix
Command(targetName, fullPath + "/GPUPerfStudioLegacy/Server/WebServer/GPUPerfServer", Copy("$TARGET", "$SOURCE"))

CopySupportFiles(GPS_env, buildCodeXL)

# Build the linux test executable(s)
if buildTests == True :
    # Remove the test folder so it can be rebuilt.
    # This is a bit hacky but will do for now

    target = "Tests/LinuxTests/" + GPS_env.platformPath

    command = "rm -rf " + target
    os.system(command)

    if not os.path.exists(target):
        os.makedirs(target)

    # Build the linux test executable(s)
    Tests = SConscript(['Tests/LinuxTests/SConscript'], variant_dir=fullPath+'/GPUPerfStudioLegacy/Tests/LinuxTests', duplicate=0)
    Depends(Tests, OSWrappers_Obj)
    Command(target + "/LinuxTests", fullPath + "/GPUPerfStudioLegacy/Tests/LinuxTests/LinuxTests", Copy("$TARGET", "$SOURCE"))
